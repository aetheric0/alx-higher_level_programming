The ``0-add_integer`` module
=============================

Usage
------

From the module, importing ``add_integer'':
        >>> add_integer =__import__('0-add_integer').add_integer

Addition of 1 and 2 as two integers
        >>> add_integer(1, 1)
        2

Substraction of 500 and 2
        >>> add_integer(500, -2)
        498

Addition of a float and integer, 5.1 and 7
        >>> add_integer(5.1, 7)
        12

Substraction of 65.5 and 5
        >>> add_integer(65.5, -5)
        60

Adding Two Floats 2.5, 2.3
        >>> add_integer(1.1, 2.2)
        3

Non-Digits
=============

``add_integer()`` expects both arguments to be either integers
or floating point arguments

Addition of an int and a string
        >>> add_integer(4, "School")
        Traceback (most recent call last):
            ...
        TypeError: b must be an integer

Passing None as Argument
        >>> add_integer(None)
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

Addition of Tuple
        >>> add_integer((2, 2))
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

Adding an int and a list
        >>> add_integer(2, [])
        Traceback (most recent call last):
        ...
        TypeError: b must be an integer

Case Nan:

        >>> add_integer(0, float('nan'))
        Traceback (most recent call last):
        ...
        ValueError: cannot convert float NaN to integer


Infinity Tests
=================

``add_integer()`` fails when infinity is passed as an argument to it.

Case Overflow:

        >>> add_integer(float('inf'), 0)
        Traceback (most recent call last):
        ...
        OverflowError: cannot convert float infinity to integer

Second Case Overflow:

        >>> add_integer(float('inf'), float('-inf'))
        Traceback (most recent call last):
        ...
        OverflowError: cannot convert float infinity to integer
